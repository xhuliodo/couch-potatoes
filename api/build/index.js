"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _express = _interopRequireDefault(require("express"));

var _apolloServerExpress = require("apollo-server-express");

var _neo4jDriver = _interopRequireDefault(require("neo4j-driver"));

var _neo4jGraphqlJs = require("neo4j-graphql-js");

var _dotenv = _interopRequireDefault(require("dotenv"));

var _graphqlSchema = require("./graphql-schema");

var _initialize = require("./initialize");

// set env vars from .env file
_dotenv.default.config();

const app = (0, _express.default)(); // creates autogenerated queries and mutations from ./schema.graphql
// for types that you dont want to do that, you can exclude them

const schema = (0, _neo4jGraphqlJs.makeAugmentedSchema)({
  typeDefs: _graphqlSchema.typeDefs
}); // creates a connection instance with credentials provided in .env file

const driver = _neo4jDriver.default.driver(process.env.NEO4J_URI || "bolt://localhost:7687", _neo4jDriver.default.auth.basic(process.env.NEO4J_USER || "neo4j", process.env.NEO4J_PASSWORD || "letmein"), {
  encrypted: process.env.NEO4J_ENCRYPTED ? "ENCRYPTION_ON" : "ENCRYPTION_OFF"
}); // performing any initialization procedure necessary
// (ex: creating constraints, ensuring indexes are online, etc...)


const init = async driver => {
  await (0, _initialize.initializeDb)(driver);
};

init(driver); // creates an apollo server instances with the generated schema from
// makeAugmentedSchema. it also injects the neo4j driver instance
// into the context making it possible for the auto generated
// resolvers to connect to the database
// TODO: set introspection and playground to false in production

const server = new _apolloServerExpress.ApolloServer({
  context: {
    driver,
    neo4jDatabase: process.env.NEO4J_DATABASE
  },
  schema,
  introspection: true,
  playground: true
}); // define endpoint details

const port = process.env.GRAPHQL_SERVER_PORT || 4001;
const path = process.env.GRAPHQL_SERVER_PATH || "/graphql";
const host = process.env.GRAPHQL_SERVER_HOST || "0.0.0.0"; // adding apollo instance as a middleware to express instance
// TODO: apply auth

server.applyMiddleware({
  app,
  path
}); // activate express instance

app.listen({
  host,
  port,
  path
}, () => {
  console.log(`couch-potatoes api is listening on http://${host}:${port}${path}`);
});