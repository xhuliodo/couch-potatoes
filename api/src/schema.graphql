enum Role {
  admin
}

type Movie @isAuthenticated {
  movieId(limit: Int = 10): ID! @id
  title: String!
  releaseYear: Int!
  imdbLink: String!
  posterUrl: String!
  genres: [Genre] @relation(name: "IN_GENRE", direction: "OUT")
  # this one is still in question whether or not i'm going to crawl for it
  # plot: String
}

type Genre @isAuthenticated {
  genreId: ID! @id
  name: String! @unique
}

input FavoriteGenres {
  genreId: ID!
}

# this one is still in question whether or not i'm going to crawl for it
# type Cast {

# }

type User @isAuthenticated {
  userId: ID! @id
  watchlist(limit: Int = 10): [Movie]!
    @relation(name: "WATCH_LATER", direction: "OUT")
  favoriteGenres: [Genre]! @relation(name: "FAVORITE", direction: "OUT")
}

type Mutation {
  rateMovie(movieId: ID!, rating: Int!): Movie
    @isAuthenticated
    @cypher(
      statement: """
      match (u:User{userId:$cypherParams.userId}), (m:Movie{movieId:$movieId})
      merge (u)-[r:RATED]->(m) on create set r.rating=toInteger($rating)
      return m
      """
    )
  selfRegister: User!
    @isAuthenticated
    # @hasRole(roles: [admin])
    @cypher(
      statement: """
      merge (u:User{userId:$cypherParams.userId})
      on create set u.userId=$cypherParams.userId
      return u
      """
    )
  setFavoriteGenres(genres: [ID]!): User
    @isAuthenticated
    @cypher(
      statement: """
      match (u:User{userId:$cypherParams.userId}), (g:Genre)
      where g.genreId in $genres
      merge (u)-[:FAVORITE]->(g)
      return u
      """
    )
  addToWatchlist(movieId: ID!): Movie
    @isAuthenticated
    @cypher(
      statement: """
      match (u:User{userId:$cypherParams.userId}), (m:Movie{movieId:$movieId})
      merge (u)-[:WATCH_LATER]->(m)
      return m
      """
    )
}

type Query {
  getFavoriteGenres(limit: Int): [Genre]!
    @isAuthenticated
    @cypher(
      statement: """
      match (u:User{userId: $cypherParams.userId})-[:FAVORITE]->(g:Genre)
      return g
      """
    )

  recommendPopularMoviesBasedOnGenre(limit: Int!, skip: Int!): [Movie]!
    @isAuthenticated
    @cypher(
      statement: """
      match (u:User{userId:$cypherParams.userId})-[:FAVORITE]->(g:Genre)
      with g, u match (m:Movie)-[:IN_GENRE]->(g)
      where not exists( (u)-[:RATED]->(m) ) and not exists ( (u)-[:WATCH_LATER]->(m) )
      with  distinct(m) as movie
      match (:User)-[r:RATED]->(movie)
      with movie, count(r.rating) as howMany, avg(r.rating) as reviews
      return movie
      order by howMany desc, reviews desc
      skip toInteger($skip)
      limit toInteger($limit)
      """
    )
  recommendFromOtherUsers(
    minimumRatings: Int!
    peopleToCompare: Int!
    moviesToRecommend: Int = 25
  ): [Movie]!
    @isAuthenticated
    @cypher(
      statement: """
      match (u1:User {userId:$cypherParams.userId})-[r:RATED]->(m:Movie)
      with u1, avg(r.rating) AS u1_mean
      match (u1)-[r1:RATED]->(m:Movie)<-[r2:RATED]-(u2)
      with u1, u1_mean, u2, collect({r1: r1, r2: r2}) as ratings
      where size(ratings) > toInteger($minimumRatings)
      match (u2)-[r:RATED]->(m:Movie)
      with u1, u1_mean, u2, avg(r.rating) as u2_mean, ratings unwind ratings as r
      with sum( (r.r1.rating-u1_mean) * (r.r2.rating-u2_mean) ) as nom, sqrt( sum( (r.r1.rating - u1_mean)^2) * sum( (r.r2.rating - u2_mean) ^2)) as denom, u1, u2
      where denom <> 0 with u1, u2, nom/denom as pearson
      order by pearson desc
      limit toInteger($peopleToCompare)
      match (u2)-[r:RATED]->(m:Movie)
      where not exists( (u1)-[:RATED]->(m) ) and not exists ( (u1)-[:WATCH_LATER]->(m) )
      return m, sum( pearson * r.rating) as score
      order by score desc
      limit toInteger($moviesToRecommend)
      """
    )
  recommendFromOtherLikedMovies(
    recentMoviesToCompare: Int!
    moviesToRecommend: Int!
  ): [Movie]!
    @isAuthenticated
    @cypher(
      statement: """
      match (u:User {userId:$cypherParams.userId})-[r:RATED{rating:1}]->(m:Movie)
      with u, m
      order by r desc
      limit toInteger($recentMoviesToCompare)
      match (m)-[:IN_GENRE|:ACTED_IN|:DIRECTED]-(t)<-[:IN_GENRE|:ACTED_IN|:DIRECTED]-(other:Movie)
      where not exists( (u)-[:RATED]->(other) ) and not exists ( (u)-[:WATCH_LATER]->(other) )
      with m, other, count(t) as intersection
      match (m)-[:IN_GENRE|:ACTED_IN|:DIRECTED]-(mt)
      with m, other, intersection, collect(mt.name) as s1
      match (other)-[:IN_GENRE|:ACTED_IN|:DIRECTED]-(ot)
      with m, other, intersection, s1, collect(ot.name) as s2
      with m, other, intersection,s1,s2
      with m, other, intersection, s1+[x in s2 where not x in s1] as union, s1, s2
      with other, s1,s2,((1.0*intersection)/size(union)) as jaccard
      return other
      order by jaccard desc
      limit toInteger($moviesToRecommend)
      """
    )
  watchlist: [Movie]!
    @isAuthenticated
    @cypher(
      statement: """
      match (u:User {userId:$cypherParams.userId})-[:WATCH_LATER]->(m:Movie)
      where  not exists((u)-[:RATED]->(m))
      return m
      """
    )
  # recommendToGroup(
  #   userId_1: ID!
  #   userId_2: ID!
  #   userId_3: ID
  #   minimumRatings: Int!
  #   peopleToCompare: Int!
  #   moviesToRecommend: Int = 25
  # ): [Movie]! @isAuthenticated
  #   @cypher(
  #     statement: """
  #     match (u1:User)-[r:RATED]->(m:Movie)
  #     where u1.userId in [$userId_1,$userId_2]
  #     with u1, avg(r.rating) AS u1_mean
  #     match (u1)-[r1:RATED]->(m:Movie)<-[r2:RATED]-(u2)
  #     with u1, u1_mean, u2, collect({r1: r1, r2: r2}) as ratings
  #     where size(ratings) > toInteger($minimumRatings)
  #     match (u2)-[r:RATED]->(m:Movie)
  #     with u1, u1_mean, u2, avg(r.rating) as u2_mean, ratings unwind ratings as r
  #     with sum( (r.r1.rating-u1_mean) * (r.r2.rating-u2_mean) ) as nom, sqrt( sum( (r.r1.rating - u1_mean)^2) * sum( (r.r2.rating - u2_mean) ^2)) as denom, u1, u2
  #     where denom <> 0 with u1, u2, nom/denom as pearson
  #     order by pearson desc
  #     limit toInteger($peopleToCompare)
  #     match (u2)-[r:RATED]->(m:Movie)
  #     where not exists( (u1)-[:RATED]->(m) ) return m, sum( pearson * r.rating) as score
  #     order by score desc
  #     limit toInteger($moviesToRecommend)
  #     """
  #   )
}
